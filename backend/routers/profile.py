from fastapi import APIRouter, Request, Form, UploadFile, File, Depends, HTTPException, status
from fastapi.responses import RedirectResponse
from sqlalchemy.orm import Session
import shutil
import os

from backend.database import get_db
from backend.models import User
from fastapi.templating import Jinja2Templates

router = APIRouter()
templates = Jinja2Templates(directory="backend/templates")

UPLOAD_DIR = "backend/static/uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)


# üìÑ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ñ–æ—Ä–º–æ–π
@router.get("/setup-profile")
def setup_profile_page(request: Request, db: Session = Depends(get_db)):
    user_id = request.cookies.get("user_id")
    if not user_id:
        # –µ—Å–ª–∏ –Ω–µ –≤–æ—à—ë–ª ‚Äî –Ω–∞ –ª–æ–≥–∏–Ω
        return RedirectResponse(url="/auth", status_code=status.HTTP_303_SEE_OTHER)

    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        return RedirectResponse(url="/auth", status_code=status.HTTP_303_SEE_OTHER)

    return templates.TemplateResponse("setup_profile.html", {"request": request, "user": user})


# üì§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@router.post("/save-profile")
async def save_profile(
    request: Request,
    first_name: str = Form(...),
    last_name: str = Form(...),
    nickname: str = Form(...),
    country: str = Form(...),
    dob: str = Form(...),
    category: str = Form(...),
    avatar: UploadFile = File(None),
    db: Session = Depends(get_db)
):
    user_id = request.cookies.get("user_id")
    if not user_id:
        return RedirectResponse(url="/auth", status_code=status.HTTP_303_SEE_OTHER)

    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤–∞—Ç–∞—Ä, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω
    avatar_path = user.avatar
    if avatar and avatar.filename:
        file_location = os.path.join(UPLOAD_DIR, avatar.filename)
        with open(file_location, "wb") as buffer:
            shutil.copyfileobj(avatar.file, buffer)
        avatar_path = f"/static/uploads/{avatar.filename}"

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.first_name = first_name
    user.last_name = last_name
    user.nickname = nickname
    user.country = country
    user.dob = dob
    user.category = category
    user.avatar = avatar_path

    db.commit()
    db.refresh(user)

    # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ‚Üí –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    response = RedirectResponse(url="/", status_code=status.HTTP_303_SEE_OTHER)
    return response
